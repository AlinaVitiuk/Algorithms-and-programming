// Впорядкувати задану прямокутну матрицю (оголошену статичною) за неспаданням сум елементів її стовпців, 
// використовуючи масив вказівників, а також механізм транспонування матриць.//Елементи  масиву обчислюються за співвідношенням://для першого a[i] = cos(2 * i + 0.5) + 1.5;//для другого b[i] = sin(3 * i + 1.5) + 1.2.// Перший масив А // Другий масив В #include <iostream>
#include <math.h>
#include <Windows.h>
#include <iomanip>

using namespace std;

void sort(double*, int);//прототип функції сортування
void output(double*, int);//прототип функції виводу

int main()
{
    SetConsoleOutputCP(1251);//надання консолі української мови
    int len_a, len_b; //довжини масивів
    cout << "\nВведіть розмірність масиву А= ";
    do {
        cin >> len_a;
        if (len_a < 1) cout << "\nВведіть значення розмірності більше 0" << "\t A=";
    } while (len_a < 1);//перевірка правильності введених даних
    double* a = new double[len_a];//надання розмірності масиву А
    cout << "\nЗгенерований масив А:";
    for (int i = 0; i < len_a; i++)//генерація масиву А
    {
        *(a + i) = cos(2 * (double)i + 0.5) + 0.5;
        cout << setw(10) << '\n' << *(a + i);
    }

    cout << "\nВведіть розмірність масиву B= ";
    do {
        cin >> len_b;
        if (len_b < 1) cout << "\nВведіть значення розмірності більше 0" << "\t B=";
    } while (len_b < 1);//перевірка правильності введених даних
    double* b = new double[len_b];// надання розмірності масиву В
    cout << "\nЗгенерований масив B:";
    for (int i = 0; i < len_b; i++)//генерація масиву В
    {
        *(b + i) = sin(3 * (double)i + 1.5) + 1.2;
        cout << setw(10) << '\n' << *(b + i);
    }

    cout << "\n\nВідсортований масив А:";
    sort(a, len_a);//сортування масиву А
    output(a, len_a);//вивід масиву А


    cout << "\n\nВідсортований масив B:";
    sort(b, len_b);//сортування масиву В
    output(b, len_b);//вивід масиву В

    cout << "\n\nВідсортований об'єднаний масив С:";
    int len_c = len_a + len_b;//створення нової розмірності для масиву С
    double* c = new double[len_c];//оголошення масиву С
    for (int i = 0; i < len_a; i++) {//заповнення масиву С елементами з А
        *(c + i) = *(a + i);
    }
    for (int i = 0; i < len_b; i++) {//заповнення масиву С елементами з В
        *(c + i + len_a) = *(b + i);
    }
    sort(c, len_c);//сортування масиву С
    output(c, len_c);//вивід масиву С
    delete[] a, b, c;// вивільнення пам'яті

}

void sort(double* x, int k) { //функція сортування
    int p = 1;
    while (p && k > 1) {
        p = 0, k--;
        for (int i = 0; i < k; i++) {
            if (*(x + i) < *(x + i + 1)) {
                double dodatk = *(x + i);
                *(x + i) = *(x + i + 1);
                *(x + i + 1) = dodatk;
                p = 1;
            }
        }
    }
}

void output(double* x, int k) { //функція виводу
    for (int i = 0; i < k; i++)
    {
        cout << setw(10) << '\n' << *(x + i);
    }
}