/*Створити двовимірний динамічний масив символів, де кожен рядокможе мати різну розмірність, залежно від уведеної символьної стрічки(речення).Доповнювати цей масив доти, поки не буде введено порожнюстрічку.Вивести на екран введений текст, а тоді, використовуючи вказівники,впорядкувати його так, щоб кожна наступна стрічка була не коротшою відпопередньої.*/#include <iostream>#include <cstring>#include <Windows.h>#pragma warning (disable :4996)using namespace std;enum {	choice_ADD_end = 1, choice_Insert, choice_Delete_line, choice_Delete_All,	choice_Print, choice_Sort, choice_Quit};int input_number(const char*); //введення числаint menu(); //менюchar** Add_line(char**, int&); //додавання стрічки в кінець текстуchar** Insert_line(char**, int&); //вставляння стрічки у текстchar** Delete_line(char**, int&); //видалення рядкаvoid Delete_all_lines(char**&, int&); //очищення всього текстуvoid Print_text(char**, int, const char*); //вивід тексту на екранbool Is_empty_array(int); //перевірка порожності текстуvoid Sort_lines(char**&, int); //бульбашкове сортування текстуint main(){	SetConsoleOutputCP(1251); /* зміна кодування для використання кирилиці при	 вводі та виводі */	SetConsoleCP(1251);	char** text = 0; int n = 0, choice;	while ((choice = menu()) != choice_Quit)	{		switch (choice)		{		case choice_ADD_end: text = Add_line(text, n); break;		case choice_Insert: text = Insert_line(text, n); break;		case choice_Delete_line:			if (!Is_empty_array(n)) text = Delete_line(text, n); break;		case choice_Print:			if (!Is_empty_array(n)) Print_text(text, n, "Текст"); break;		case choice_Sort:			if (!Is_empty_array(n)) Sort_lines(text, n); break;		case choice_Delete_All:			if (!Is_empty_array(n)) Delete_all_lines(text, n); break;		case choice_Quit: break;		default:cout << "\nНевiрний вибiр\n"; break;		};	}	if (!Is_empty_array(n)) Delete_all_lines(text, n);	cout << "\nКiнець програми\n";	return 0;}int input_number(const char* ms) //введення числа{	char rez[10];	cout << "Введіть " << ms << " = ";	gets_s(rez);	return atoi(rez);}int menu() //меню{	int choice;	cout << "\n\t_МЕНЮ_\n"		<< choice_ADD_end << " - додавання стрiчки вкінці\n"		<< choice_Insert << " - вставлення стрiчки за номером\n"		<< choice_Delete_line << " - видалення стрiчки за номером\n"		<< choice_Delete_All << " - видалення всього\n"		<< choice_Print << " - друк тексту\n"		<< choice_Sort << " - сортування тексту\n"		<< choice_Quit << " - ВИХІД\n\n";	choice = input_number("Ваш вибiр");	return choice;}char** Add_line(char** a, int& n) //додавання стрічки в кінець тексту{	char str[BUFSIZ]; int m;	cout << "\nВведiть новий рядок тексту\n";	gets_s(str);	m = int(strlen(str));	if (!n)	{		a = new char* [++n];		a[0] = new char[m + 1];		strcpy(*a, str);		Print_text(a, n, "Текст");		return a;	}	char** c = new char* [++n];	for (int i = 0; i < n - 1; i++)	{		*(c + i) = *(a + i);	}	c[n - 1] = new char[m + 1];	strcpy(*(c + n - 1), str);	delete[]a;	Print_text(c, n, "Текст");	return c;}char** Insert_line(char** a, int& n) //вставлення стрічки у текст{	char str[BUFSIZ];	int m, k, j = 0;	cout << "\nВведiть новий рядок тексту\n";	gets_s(str);	m = int(strlen(str));	do {		cout << "\nУ тексті " << n << " рядків \n";		k = input_number("номер позицii вставки");	} while (k <= 0 || k > n + 1);	k--;	if (!n)	{		a = new char* [++n];		a[0] = new char[m + 1];		strcpy(*a, str);		Print_text(a, n, "Текст");		return a;	}	char** c = new char* [++n];	for (int i = 0; i < n; i++)	{		if (i == k)		{			c[i] = new char[m + 1];			strcpy(*(c + i), str);			j = 1;		}		else			*(c + i) = *(a + i - j);	}	delete[]a;	Print_text(c, n, "Текст");	return c;}char** Delete_line(char** a, int& n) //видалення рядка{	int k, j = 0;	do {		cout << "\nУ текстi " << n << " рядкiв\n";		k = input_number(" номер рядка для видалення ");	} while (k <= 0 || k > n);	char** c = new char* [--n];	k--;	for (int i = 0; i < n; i++)	{		if (i == k)		{			j = 1;		}		c[i] = a[i + j];	}	delete[]a[k];	delete[]a;	Print_text(c, n, "Текст");	return c;}void Delete_all_lines(char**& a, int& n) //очищення всього тексту{	for (int i = 0; i < n; i++)		delete[]a[i];	delete[]a;	n = 0;}void Print_text(char** a, int n, const char* ms) //вивід тексту на екран{	if (!Is_empty_array(n))	{		cout << "\n*** " << ms << " ***\n";		for (int i = 0; i < n; i++)			cout << *(a + i) << endl;	}}bool Is_empty_array(int m) //перевірка порожності тексту{	if (!m)		cout << "\n\tТекст порожнiй\n";	return (m) ? false : true;}void Sort_lines(char**& a, int n) //бульбашкове сортування тексту{	int p = 1, k = n;	while (p && k > 1)	{		p = 0; k--;		for (int i = 1; i <= k; i++)		{			if (strcmp(*(a + i - 1), *(a + i)) > 0)			{				char* b = *(a + i - 1);				*(a + i - 1) = *(a + i);				*(a + i) = b;				p = 1;			}		}	}	Print_text(a, n, "Текст");}